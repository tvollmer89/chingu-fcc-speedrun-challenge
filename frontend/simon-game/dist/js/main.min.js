$('#start').click(function(){
  game.active = true;
  game.locked = true;
  updateLevelDisplay();
  game.genSequence();
  $('.btn').prop('disabled', true);
  game.dTimer = setTimeout(displaySequence(), 2000);
});

$('#switch').click(function() {
  //turn off
  if($(this).hasClass('on')){
    $('#light').toggleClass("on", false);
    $('.btn').prop('disabled', true);
    game.reset();
  } else{
    $('.btn').prop('disabled', false);
  }
  //turn on and start game
  $(this).toggleClass("on");
  $('.controls-container').toggleClass("power-off");
  game.init();
  /**
   * need to toogle this when not player's turn here is only temporary
   */
});

$('#strict').click(function() {
  $('#light').toggleClass("on");
  game.strict = (game.strict === true)?false: true;
  console.log(game);
});

$('.color-btn').click(function(e) {
  let c = e.target.id;
  playerMove(c);
  game.locked = true;
  $('.color-btn').toggleClass('clickable', true);
  //game.erMessage("!!");
});

/**
 *  Trigger sound and color change when button computer or user
 *  triggers a color
 *  @param  string   color [Color button ID]
 */
function flash(color){
  let c = color;
  let audio = document.getElementById(`audio-${c}`);
  $('#'+c).toggleClass('light');
  audio.play();
  game.cTimer = setTimeout(function(){
   // toggle back after 1 second
   $('#'+c).toggleClass('light');
  },500);
};

function displaySequence(){
  var flTimer = function(c){
      //console.log(game.sequence[i]);
      setTimeout(function(){
        flash(c);
        console.log(game.sequence[i]);
    },2000);
  }
  for(var i=0; i< game.level; i++){
    let c= game.sequence[i];
    flTimer(c);
  }
  clearTimeout(game.dTimer);
  game.playerTurn("start");
}

/**
 *  Update the current level display
 *  @return void
 */
function updateLevelDisplay(){
  let l = ("00" + game.level).slice(-2);
  document.getElementById("score").innerHTML = l;
}

function playerMove(color){
  let c = color;
  if(!game.locked){
    flash(c);
    if(c === game.sequence[game.level-1]){
      game.score++;
      game.level++;
      game.playerTurn("end");
    } else{
      this.active = false;
      game.handleError();
    }
  }
}
/**
 *  creting the game object
 *  @type {Object}
 */
let game = {};

game.init = function() {
  this.level = 1;
  this.turn = 0;
  this.score = 0;
  this.strict = false;
  this.sequence = [];
  this.active = false; // false until player presses start
  this.locked = true;
}

game.reset = function(){
  this.init();
  document.getElementById("score").innerHTML = "--";
}
/**
 *  Generate the computer's planned sequence
 *  @return {[type]} [description]
 */
game.genSequence = function(){
  let colors = ["g", "r", "y", "b"];
  for(let i=0; i<20; i++){
    this.sequence.push(colors[Math.floor(Math.random() * 4)]);
  }
}

game.playerTurn = function(a){
  if(a === "start"){
    this.locked = false;
    $('.color-btn').toggleClass('clickable', true);
  } else {
    this.locked = true;
    $('.color-btn').toggleClass('clickable', false);
    if(this.active == true){
      game.dTimer = setTimeout(displaySequence(), 2000);
    }
  }
};

game.erMessage = function(msg){
  //lock button clicks
  this.locked = true;
  $('.color-btn').toggleClass('clickable', true);

  //update score text
  $('#score').text(msg);

  let sBox = function(){
    $('.score-box').addClass('off');
    game.erTimeout = setTimeout(function(){
      $('.score-box').removeClass('off');
    },250);
  };
  let count = 0;
  sBox();
  game.erInterval = setInterval(function(){
    sBox();
    count++;
    if(count === 3)
      clearInterval(game.erInterval);
  },500)
  clearTimeout(this.eTimer);
};

game.handleError = function(){
  game.erMessage("!!");
  if(this.strict === true){
    game.reset();
  }
}




//# sourceMappingURL=../maps/js/main.min.js.map
