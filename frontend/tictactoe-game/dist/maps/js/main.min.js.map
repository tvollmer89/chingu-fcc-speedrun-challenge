{"version":3,"sources":["js/game.js","js/main.js"],"names":[],"mappingsrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../../js/main.min.js","sourcesContent":["/**\n *  Function to set player token (either X or O)\n *  @param  {string} p player's choice\n *  @return {void}   starts the game\n */\n\nfunction startGame() {\n  $('.cell').text(\"\").removeClass('user comp').addClass('empty');\n  board = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  updateBoard(board);\n  userMove();\n}\n\nfunction updateBoard(b) {\n  b.forEach(function(el, i) {\n    var cellId = '#' + i.toString();\n    if (el === -1) {\n      $(cellId).text(game.user).addClass('user');\n    } else if (el === 1) {\n      $(cellId).text(game.comp).addClass('comp');\n    }\n  });\n}\n\n/**\n *  Allows user to take turn, adds click function to available cells.\n *  @return {void} Updates board with user's move and either advances turn to computer or ends game\n */\nfunction userMove() {\n  game.currentPlayer = 'user';\n  $('.cell:empty').click(function() {\n    $(this).removeClass('empty');\n    var cellNum = parseInt($(this).attr('id'));\n    board[cellNum] = -1;\n    updateBoard(board);\n\n    if(gameOver(board)) {\n      var result = gameOver(board);\n      setTimeout(endGame(result),(result === 'win') ? 700 : 100);\n    } else {\n      setTimeout(compMove, 10);\n    }\n    $('.cell').off();\n  });\n}\n\n/**\n *  Contructs move that computer player will make\n *  @return {void} Fills a square with computer move then either advances the turn or ends game\n */\nfunction compMove() {\n  game.currentPlayer = 'comp';\n  console.log(game.currentPlayer);\n  miniMax(board, game.currentPlayer);\n  board[cMove] = 1;\n  $('#'+cMove.toString()).removeClass('empty');\n  updateBoard(board);\n\n  // Game over or player turn\n  if(gameOver(board)) {\n    var result = gameOver(board);\n    setTimeout(endGame(result),(result === 'win') ? 700 : 100);\n  } else {\n    userMove();\n  }\n}\n\n/**\n *  Get the score of given state of the board\n *  @param  {array} b Current state of the board\n *  @return {int}   Score based on status of the game\n */\nfunction score(b) {\n  var s = gameOver(b);\n  if (s === 'win') {\n    return 10;\n  } else if (s === 'lose') {\n    return -10;\n  } else if (s === 'draw'){\n    return 0;\n  }\n}\n\n/**\n *  Calculate the next move for the computer player, depth set at 3 for medium skill level\n *  @param  {array} state  current board state array\n *  @param  {string} playerID current player\n *  @param  {num}    d     counter for recursive\n *  @return {score}        Value of the state of the board\n */\nfunction miniMax(state, player) {\n  var s = gameOver(state);\n  if (s === 'win') {\n    return 10;\n  } else if (s === 'lose') {\n    return -10;\n  } else if (s === 'draw'){\n    return 0;\n  }\n\n  var moves = [], scores = [];\n\n  openCells(state).forEach(function(cell) {\n    state[cell] = (player === 'comp') ? 1 : -1;\n    scores.push(miniMax(state, (player === 'comp') ? 'opponent' : 'comp'));\n    moves.push(cell);\n    state[cell] = 0;\n  });\n\n  //scores.sort(function(a, b){return b-a});\n  var n = Math.random()*100;\n  if (player === 'opponent' && n >= 10) {\n    cMove = moves[scores.indexOf(Math.max.apply(Math, scores))];\n    return Math.max.apply(Math, scores);\n  } else {\n    cMove = moves[scores.indexOf(Math.min.apply(Math, scores))];\n    return Math.min.apply(Math, scores);\n  }\n\n}\n\n/**\n *  Find current empty cells\n *  @param  {array} b array of cells\n *  @return {array}   array listing of open cells\n */\nfunction openCells(b) {\n  return b.map(function(curr, idx) {\n    if (!curr) {\n      return idx;\n    }\n  }).filter(function(e) {\n    return (typeof e !== \"undefined\");\n  });\n}\n\n/**\n *  Determine if game is over, Displays end message if over -\n *  \"You Won!\", \"You Lost!\", \"It's a Draw!\"\n *  @return {string/bool} If game is over, returns true if not, returns false\n */\nfunction gameOver(b) {\n  var playedCells = b.reduce(function(prev, cur) {\n    return Math.abs(prev) + Math.abs(cur);\n  });\n\n  var result = winCombos.map(function(combos) {\n    return combos.map(function(c) {\n      return board[c];\n    }).reduce(function(prev, cur) {\n      return prev + cur;\n    });\n  }).filter(function(total) {\n    return Math.abs(total) === 3;\n  });\n\n  if (result[0] === 3) {\n    return 'lose';\n  } else if (result[0] === -3) {\n    return 'win';\n  } else if (playedCells === 9) {\n    return 'draw';\n  } else {\n    return false;\n  }\n}\n\n/**\n *  Display game over message and restart the game.\n *  @return {void}\n */\nfunction endGame(r) {\n  //show end game modal\n  if (r === 'win') {\n    gameMessage = \"You won! Play again?\";\n  } else if (r === 'lose') {\n    gameMessage = \"You lost! Play again?\";\n  } else if (r === 'draw') {\n    gameMessage = \"It's a draw! Play again?\";\n  }\n  newGame();\n}","/*\nGlobal Variables\n */\nvar game, playerID, compID, currentPlayer, gameMessage;\nvar cMove = 0;\nvar board = [0, 0, 0, 0, 0, 0, 0, 0, 0];\nvar winCombos = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6]\n];\n\n/**\n *  Begins a new game. Initializes game object and board to blank.\n *  Board values: 0 = empty, 1 = computer, -1 = user\n *  @return void displays modal for user to make selection\n */\nfunction newGame(){\n  game = {\n    user: '',\n    comp: '',\n    currentPlayer: '',\n    moves: 0,\n    over: false\n  };\n  $('#game-message').text(gameMessage);\n\n  $('#choiceModal').modal({backdrop:false, keyboard:false}).modal('show');\n};\n\n// Set player choice\n$('#player-x').on('click', function () {\n  $('#choiceModal').modal('hide');\n  game.user = 'X';\n  game.comp = 'O';\n  startGame();\n});\n\n$('#player-o').on('click', function () {\n  $('#choiceModal').modal('hide');\n  game.user = 'O';\n  game.comp = 'X';\n  startGame();\n});\n\n$(document).ready(function() {\n  gameMessage = \"Tic Tac Toe\";\n  newGame();\n});\n"]}